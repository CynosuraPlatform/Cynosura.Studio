main(model) ::= <<
using System.Threading.Tasks;
using Cynosura.Core.Services.Models;
using $model.Solution.Namespace$.Core.Requests.$model.Entity.PluralName$;
using $model.Solution.Namespace$.Core.Requests.$model.Entity.PluralName$.Models;
using $model.Solution.Namespace$.Web.Models;
using Cynosura.Web.Infrastructure;
using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace $model.Solution.Namespace$.Web.Controllers
{
    [ServiceFilter(typeof(ApiExceptionFilterAttribute))]
    [Authorize(Roles = "Administrator")]
    [ValidateModel]
    [Route("api/[controller]")]
    public class $model.Entity.Name$Controller : Controller
    {
        private readonly IMediator _mediator;

        public $model.Entity.Name$Controller(IMediator mediator)
        {
            _mediator = mediator;
        }

        [HttpGet("")]
        public async Task<PageModel<$model.Entity.Name$Model>\> Get$model.Entity.PluralName$Async(int? pageIndex, int? pageSize, $model.Entity.Name$Filter filter)
        {
            return await _mediator.Send(new Get$model.Entity.PluralName$() { PageIndex = pageIndex, PageSize = pageSize, Filter = filter });
        }

        [HttpGet("{$model.Entity.IdField.NameLower$:$model.Entity.IdField.TypeName$}")]
        public async Task<$model.Entity.Name$Model> Get$model.Entity.Name$Async($model.Entity.IdField.TypeName$ $model.Entity.IdField.NameLower$)
        {
            return await _mediator.Send(new Get$model.Entity.Name$() { $model.Entity.IdField.Name$ = $model.Entity.IdField.NameLower$ });
        }

        [HttpPut("{$model.Entity.IdField.NameLower$:$model.Entity.IdField.TypeName$}")]
        public async Task<StatusViewModel> Put$model.Entity.Name$Async($model.Entity.IdField.TypeName$ $model.Entity.IdField.NameLower$, [FromBody] Update$model.Entity.Name$ update$model.Entity.Name$)
        {
            await _mediator.Send(update$model.Entity.Name$);
            return new StatusViewModel();
        }

        [HttpPost("")]
        public async Task<StatusViewModel> Post$model.Entity.Name$Async([FromBody] Create$model.Entity.Name$ create$model.Entity.Name$)
        {
            var $model.Entity.IdField.NameLower$ = await _mediator.Send(create$model.Entity.Name$);
            return new CreationStatusViewModel($model.Entity.IdField.NameLower$);
        }

        [HttpDelete("{$model.Entity.IdField.NameLower$:$model.Entity.IdField.TypeName$}")]
        public async Task<StatusViewModel> Delete$model.Entity.Name$Async($model.Entity.IdField.TypeName$ $model.Entity.IdField.NameLower$)
        {
            await _mediator.Send(new Delete$model.Entity.Name$() { $model.Entity.IdField.Name$ = $model.Entity.IdField.NameLower$ });
            return new StatusViewModel();
        }
    }
}
>>