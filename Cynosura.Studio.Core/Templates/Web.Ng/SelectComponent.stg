main(model) ::= <<
import { Component, Input, OnInit, forwardRef } from "@angular/core";
import { ControlValueAccessor, NG_VALUE_ACCESSOR } from "@angular/forms";

import { $model.Entity.Name$ } from "./$model.Entity.NameKebab$.model";
import { $model.Entity.Name$Service } from "./$model.Entity.NameKebab$.service";

@Component({
    selector: "app-$model.Entity.NameKebab$-select",
    templateUrl: "./$model.Entity.NameKebab$-select.component.html",
    providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => $model.Entity.Name$SelectComponent),
            multi: true
        }
    ]
})

export class $model.Entity.Name$SelectComponent implements OnInit, ControlValueAccessor {
    constructor(private $model.Entity.NameLower$Service: $model.Entity.Name$Service) { }

    $model.Entity.PluralNameLower$: $model.Entity.Name$[] = [];

    @Input()
    value: number | null = null;

    get innerValue() {
        return this.value;
    }

    set innerValue(val) {
        this.value = val;
        this.onChange(val);
        this.onTouched();
    }

    @Input()
    name: string;

    @Input()
    label: string;

    @Input()
    readonly = false;

    onChange: any = () => { };
    onTouched: any = () => { };

    ngOnInit(): void {
        this.$model.Entity.NameLower$Service.get$model.Entity.PluralName$().then($model.Entity.PluralNameLower$ => this.$model.Entity.PluralNameLower$ = $model.Entity.PluralNameLower$.pageItems);
    }

    registerOnChange(fn) {
        this.onChange = fn;
    }

    registerOnTouched(fn) {
        this.onTouched = fn;
    }

    writeValue(value) {
        this.innerValue = value;
    }
}

>>
