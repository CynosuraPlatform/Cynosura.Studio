main(model) ::= <<
<mat-card>

    <mat-card-header>
        <mat-card-title>$model.Entity.PluralDisplayName$</mat-card-title>
    </mat-card-header>

    <mat-card-actions>        
        <div class="action-item">
            <form (ngSubmit)="get$model.Entity.PluralName$()">
                <mat-form-field>
                    <mat-label>Text</mat-label>
                    <input matInput id="text" type="text" name="text" placeholder="Text" [(ngModel)]="state.filter.text" />
                </mat-form-field>
                <button mat-raised-button type="submit" color="primary">Search</button>
                <button mat-raised-button type="reset" (click)="reset()">Reset</button>
            </form>
        </div>
        <div class="action-item">
            <a mat-raised-button color="primary" [routerLink]="[0]">Create</a>
        </div>
    </mat-card-actions>

    <mat-card-content class="mat-elevation-z8">
        
        <table *ngIf="content" mat-table [dataSource]="content.pageItems" multiTemplateDataRows appClickOutside (clickOutside)="expandedElement = null">

            $model.Entity.AllFields:fieldContainer(); separator="\n"$

            <ng-container matColumnDef="expandedDetail">
                <td mat-cell *matCellDef="let item" [attr.colspan]="columns.length">
                    <app-table-detail [expanded]="item == expandedElement">
                        <a mat-raised-button [routerLink]="[item.id]" color="primary">Edit</a>
                        <button mat-raised-button (click)="delete(item.id)" color="warn">Delete</button>
                    </app-table-detail>
                </td>
            </ng-container>
            <tr mat-header-row *matHeaderRowDef="columns"></tr>
            <tr mat-row *matRowDef="let item; columns: columns;" class="table-item"
                [class.table-item-expanded]="expandedElement === item" (click)="expandedElement = item">
            </tr>
            <tr mat-row *matRowDef="let row; columns: ['expandedDetail']" class="table-expand-item"></tr>

        </table>

        <div>
            <mat-paginator [pageSize]="state.pageSize" [pageIndex]="state.pageIndex" [pageSizeOptions]="pageSizeOptions" [length]="content?.totalItems" 
                (page)="onPage(\$event)" showFirstLastButtons></mat-paginator>
        </div>

    </mat-card-content>

</mat-card>
>>

fieldContainer(field) ::= <<
<ng-container matColumnDef="$field.NameLower$">
    <th mat-header-cell *matHeaderCellDef>$field.DisplayName$</th>
    <td mat-cell *matCellDef="let item">
        $field:(field.Template)(); separator="\n"$
    </td>
</ng-container>
>>

field(field) ::= <<
$field:(field.Template)()$
>>

Type(field) ::= <<
$field:(field.TypeTemplate)()$
>>

Entity(field) ::= <<
<app-$field.Entity.NameKebab$-show [value]="item.$field.NameLower$"></app-$field.Entity.NameKebab$-show>
>>

Enum(field) ::= <<
<app-$field.Enum.NameKebab$-view [value]="item.$field.NameLower$"></app-$field.Enum.NameKebab$-view>
>>

String(field) ::= <<
<app-text-view [value]="item.$field.NameLower$"></app-text-view>
>>

Int32(field) ::= <<
<app-number-view [value]="item.$field.NameLower$"></app-number-view>
>>

Int64(field) ::= <<
<app-number-view [value]="item.$field.NameLower$"></app-number-view>
>>

Decimal(field) ::= <<
<app-number-view [value]="item.$field.NameLower$"></app-number-view>
>>

Double(field) ::= <<
<app-number-view [value]="item.$field.NameLower$"></app-number-view>
>>

Boolean(field) ::= <<
<app-bool-view [value]="item.$field.NameLower$"></app-bool-view>
>>

DateTime(field) ::= <<
<app-datetime-view [value]="item.$field.NameLower$"></app-datetime-view>
>>

Date(field) ::= <<
<app-date-view [value]="item.$field.NameLower$"></app-date-view>
>>

Time(field) ::= <<
<app-time-view [value]="item.$field.NameLower$"></app-time-view>
>>

Guid(field) ::= <<
<app-text-view [value]="item.$field.NameLower$"></app-text-view>
>>

Blob(field) ::= <<
>>