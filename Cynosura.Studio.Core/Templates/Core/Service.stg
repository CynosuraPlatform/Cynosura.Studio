main(model) ::= <<
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AutoMapper;
using Cynosura.Core.Data;
using Cynosura.Core.Services.Models;
using Microsoft.EntityFrameworkCore;
using $model.Solution.Namespace$.Core.Entities;
using $model.Solution.Namespace$.Core.Services.Models;

namespace $model.Solution.Namespace$.Core.Services
{
    public class $model.Entity.Name$Service : I$model.Entity.Name$Service
    {
        private readonly IEntityRepository<$model.Entity.Name$> _$model.Entity.NameLower$Repository;

        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public $model.Entity.Name$Service(IEntityRepository<$model.Entity.Name$> $model.Entity.NameLower$Repository,
            IUnitOfWork unitOfWork,
            IMapper mapper)
        {
            _$model.Entity.NameLower$Repository = $model.Entity.NameLower$Repository;
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public async Task<$model.Entity.Name$> Get$model.Entity.Name$Async(int id)
        {
            return await _$model.Entity.NameLower$Repository.GetEntities()
$model.Entity.EntityFields:include(); separator="\n "$
                .Where(e => e.Id == id)
                .FirstOrDefaultAsync();
        }

        public async Task<PageModel<$model.Entity.Name$> > Get$model.Entity.PluralName$Async(int? pageIndex = null, int? pageSize = null)
        {
            IQueryable<$model.Entity.Name$> query = _$model.Entity.NameLower$Repository.GetEntities()
$model.Entity.EntityFields:include(); separator="\n "$;
            query = query.OrderBy(e => e.Id);
            return await query.ToPagedListAsync(pageIndex, pageSize);
        }

        public async Task<int> Create$model.Entity.Name$Async($model.Entity.Name$CreateModel model)
        {
            var $model.Entity.NameLower$ = _mapper.Map<$model.Entity.Name$CreateModel, $model.Entity.Name$>(model);
            _$model.Entity.NameLower$Repository.Add($model.Entity.NameLower$);
            await _unitOfWork.CommitAsync();
            return $model.Entity.NameLower$.Id;
        }

        public async Task Update$model.Entity.Name$Async(int id, $model.Entity.Name$UpdateModel model)
        {
            var $model.Entity.NameLower$ = await Get$model.Entity.Name$Async(id);
            if ($model.Entity.NameLower$ == null)
                return;
            _mapper.Map(model, $model.Entity.NameLower$);
            await _unitOfWork.CommitAsync();
        }

        public async Task Delete$model.Entity.Name$Async(int id)
        {
            var $model.Entity.NameLower$ = await Get$model.Entity.Name$Async(id);
            if ($model.Entity.NameLower$ == null)
                return;
            _$model.Entity.NameLower$Repository.Delete($model.Entity.NameLower$);
            await _unitOfWork.CommitAsync();
        }
    }
}

>>

include(field) ::= <<
                .Include(e => e.$field.Name$)
>>